// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/app/generated/prisma"
}

// prisma/schema.prisma
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // uncomment next line if you use Prisma <5.10
  // directUrl = env("DATABASE_URL_UNPOOLED")
}

model User {
  id         String      @id @default(cuid())
  name       String?
  email      String?     @unique
  image      String?
  role       Role        @default(READER)
  accounts   Account[]
  sessions   Session[]
  posts      Post[]      @relation("AuthorPosts")
  comments   Comment[]
  likes      Like[]
  savedPosts SavedPost[]
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id])

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id])
}

model Post {
  id         String      @id @default(cuid())
  title      String
  slug       String      @unique
  content    Json // For TipTap/Editor.js rich text content
  imageUrl   String?
  category   Category?   @relation(fields: [categoryId], references: [id])
  categoryId String?
  tags       Tag[]       @relation("PostTags")
  authorId   String
  author     User        @relation("AuthorPosts", fields: [authorId], references: [id])
  comments   Comment[]
  likes      Like[]
  savedBy    SavedPost[]
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  postId    String
  userId    String
  post      Post     @relation(fields: [postId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
}

model Like {
  id        String   @id @default(cuid())
  userId    String
  postId    String
  user      User     @relation(fields: [userId], references: [id])
  post      Post     @relation(fields: [postId], references: [id])
  createdAt DateTime @default(now())

  @@unique([userId, postId])
}

model SavedPost {
  id        String   @id @default(cuid())
  userId    String
  postId    String
  user      User     @relation(fields: [userId], references: [id])
  post      Post     @relation(fields: [postId], references: [id])
  createdAt DateTime @default(now())

  @@unique([userId, postId])
}

model Category {
  id    String @id @default(cuid())
  name  String @unique
  posts Post[]
}

model Tag {
  id    String @id @default(cuid())
  name  String @unique
  posts Post[] @relation("PostTags")
}

enum Role {
  ADMIN
  EDITOR
  READER
}
